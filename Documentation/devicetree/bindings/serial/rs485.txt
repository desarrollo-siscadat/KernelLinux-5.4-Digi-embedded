* RS485 serial communications

The RTS signal is capable of automatically controlling line direction for
the built-in half-duplex mode.
The properties described hereafter shall be given to a half-duplex capable
UART node.

Optional properties:
- rs485-rts-delay: prop-encoded-array <a b> where:
  * a is the delay between rts signal and beginning of data sent in milliseconds.
      it corresponds to the delay before sending data.
  * b is the delay between end of data sent and rts signal in milliseconds
      it corresponds to the delay after sending data and actual release of the line.
  If this property is not specified, <0 0> is assumed.
- rs485-rts-active-low: drive RTS low when sending (default is high).
- linux,rs485-enabled-at-boot-time: empty property telling to enable the rs485
  feature at boot time. It can be disabled later with proper ioctl.
- rs485-rx-during-tx: empty property that enables the receiving of data even
  while sending data.
- digi,rts-gpio: use a standard GPIO (instead of RTS) to control transfer direction.
  This configuration forbids enabling DMA on the UART.

RS485 example for Atmel USART:
	usart0: serial@fff8c000 {
		compatible = "atmel,at91sam9260-usart";
		reg = <0xfff8c000 0x4000>;
		interrupts = <7>;
		atmel,use-dma-rx;
		atmel,use-dma-tx;
		linux,rs485-enabled-at-boot-time;
		rs485-rts-delay = <0 200>;		// in milliseconds
	};

RS485 example for Digi ccimx8x-sbc-pro:
	&lpuart3 {
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_lpuart3>,
			    <&pinctrl_flexcan3_lpuart3_gpios>;
		pinctrl-assert-gpios = <&gpio3 23 GPIO_ACTIVE_LOW>;
		linux,rs485-enabled-at-boot-time;
		digi,rts-gpio = <&gpio3 24 GPIO_ACTIVE_HIGH>;
};
